# Values file for axiom.
# This is a YAML-formatted file.
nameOverride:  # ""

# fullnameOverride -- Override the full qualified app name
fullnameOverride:  # ""

# imagePullSecrets -- add secrets for private images
imagePullSecrets: []
#  - name: <REGISTRY_SECRET>

# imageRegistryCredentials -- add secret Image Registry Credentials
imageRegistryCredentials: {}
  # registry: ""
  # username: ""
  # password: ""
  # email: ""

# License token (as provided by Axiom support)
licenseToken: "" # if not supplied, you'll end up with the free plan

# [required] Postgres endpoint, should be in the following format:
# "postgresql://host:port/dbname?user=[username]&password=[pwd]&sslmode=require"
# the postgres user provided must be able to create new tables in the DB
postgresUrl: ""

# Redis URL, should be in the following format:
# "redis://:<password (optional)>@<address>/<db (optional)>"
# Examples:
#   redis://redis.example.org:6379
#   redis://:qwerty@localhost:6379/1
redisUrl: ""

# If you want, you can set a different Redis instance as cache registry.
# If you leave this unset, it will use the above redisUrl as cache registry.
cacheRegistryUrl: ""

# [required] URL specifying how to send emails:
# "sendgrid://apikey?from=noreply@domain.org&fromName=name"
# "smtp://username:password@address:port?from=origin-email&fromName=Axiom&insecure=true"
emailUrl: ""

# [required] JWT Public and Private Key:
# Generate Using:
# ```
#  openssl genpkey -algorithm ed25519 -out privkey.pem
#  openssl pkey -in privkey.pem -pubout -out pubkey.pem
# ```
jwtPublicKey: ""
jwtPrivateKey: ""

# Next Auth Secret, If empty, a random string will be generated
nextAuthSecret: ""

# URL of this instance, email notifications will use this to link back
# "https://my-axiom.company.org"
externalUrl: ""

# Definition of storage
storage:
  primary:
    # [required] Set to a URI based on the cloud you're using, we support azure / aws / do / gcp
    # Azure: "blob://container"
    # AWS: "s3://bucketName"
    # DigitalOcean: "spaces://bucketName"
    # GCP: "gcs://bucketName"
    # The URI can optionally be suffixed by a path prefix (for example "s3://bucketName/path/prefix")
    #uri: "s3://axiom"

    # AWS-specific properties
    #awsRegion: 'us-east-1'
    #awsAccessKeyID: ''
    #awsSecretAccessKey: ''

    # Azure-specific properties
    #azureStorageAccount: ''
    #azureStorageAccessKey: ''

    # DigitalOcean-specific properties
    #spacesRegion: 'nyc3'
    #spacesKey: ''
    #spacesSecret: ''

    # GCP-specific properties
    #googleApplicationCredentials: '{
    #  "type": "service_account",
    #  "project_id": "...",
    #}'

  fallback:
    # Fallback storage is used when primary is not reachable
    # use the same format as primary storage including credentials
    uri: ""

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    # - host: my-axiom.local
  tls: []
  #  - secretName: my-axiom-tls
  #    hosts:
  #      - my-axiom.local

# Settings for axiom-api
api:
  replicas: 3
  image:
    repository: axiomhq/axiom-api
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    # limits:
    #   cpu: 500m
    #   memory: 1Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    # autoscaling.enabled -- If **true**, create a
    # [HorizontalPodAutoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/).
    enabled: false
    # autoscaling.minReplicas -- Specify the minimum number of replicas.
    minReplicas: 1
    # autoscaling.maxReplicas -- Specify the maximum number of replicas.
    maxReplicas: 10
    # autoscaling.targetCPUUtilizationPercentage -- Specify the target CPU utilization.
    targetCPUUtilizationPercentage: 80
    # autoscaling.targetMemoryUtilizationPercentage -- (int) Specify the target memory utilization.
    targetMemoryUtilizationPercentage:
    # autoscaling.behavior -- Configure separate scale-up and scale-down behaviors.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
  podDisruptionBudget:
    # podDisruptionBudget.enabled -- If **true**, create a
    # [PodDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/).
    enabled: false
    # podDisruptionBudget.minAvailable -- Specify the number of Pods that must still be available after an eviction.
    minAvailable: 1
    # podDisruptionBudget.maxUnavailable -- (int) Specify the number of Pods that can be unavailable after an eviction.
    maxUnavailable:
  envFrom: []
  # - configMapRef:
  #     name: <CONFIGMAP_NAME>
  # - secretRef:
  #     name: <SECRET_NAME>
  extraEnvs: [] 
    # - name: AXIOM_XYZ
    #   value: "xyz"

# Settings for axiom-app
app:
  replicas: 3
  image:
    repository: axiomhq/axiom-app
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    # limits:
    #   cpu: 500m
    #   memory: 1Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    # autoscaling.enabled -- If **true**, create a
    # [HorizontalPodAutoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/).
    enabled: false
    # autoscaling.minReplicas -- Specify the minimum number of replicas.
    minReplicas: 1
    # autoscaling.maxReplicas -- Specify the maximum number of replicas.
    maxReplicas: 10
    # autoscaling.targetCPUUtilizationPercentage -- Specify the target CPU utilization.
    targetCPUUtilizationPercentage: 80
    # autoscaling.targetMemoryUtilizationPercentage -- (int) Specify the target memory utilization.
    targetMemoryUtilizationPercentage:
    # autoscaling.behavior -- Configure separate scale-up and scale-down behaviors.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
  podDisruptionBudget:
    # podDisruptionBudget.enabled -- If **true**, create a
    # [PodDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/).
    enabled: false
    # podDisruptionBudget.minAvailable -- Specify the number of Pods that must still be available after an eviction.
    minAvailable: 1
    # podDisruptionBudget.maxUnavailable -- (int) Specify the number of Pods that can be unavailable after an eviction.
    maxUnavailable:
  envFrom: []
  # - configMapRef:
  #     name: <CONFIGMAP_NAME>
  # - secretRef:
  #     name: <SECRET_NAME>
  extraEnvs: [] 
    # - name: AXIOM_XYZ
    #   value: "xyz"

# Settings for axiom-monitors
monitors:
  replicas: 1
  image:
    repository: axiomhq/axiom-monitors
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 750m
      memory: 2Gi
    # limits:
    #   cpu: 2000m
    #   memory: 4Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    # podDisruptionBudget.enabled -- If **true**, create a
    # [PodDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/).
    enabled: false
    # podDisruptionBudget.minAvailable -- Specify the number of Pods that must still be available after an eviction.
    minAvailable: 1
    # podDisruptionBudget.maxUnavailable -- (int) Specify the number of Pods that can be unavailable after an eviction.
    maxUnavailable:
  envFrom: []
  #   - configMapRef:
  #       name: <CONFIGMAP_NAME>
  #   - secretRef:
  #       name: <SECRET_NAME>
  extraEnvs: [] # [{ name: AXIOM_XYZ, value: "xyz" }, ... ]

# Settings for axiom-login
login:
  image:
    repository: axiomhq/axiom-login
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 750m
      memory: 2Gi
    # limits:
    #   cpu: 2000m
    #   memory: 4Gi
  envFrom: []
  #   - configMapRef:
  #       name: <CONFIGMAP_NAME>
  #   - secretRef:
  #       name: <SECRET_NAME>
  extraEnvs: [] # [{ name: AXIOM_XYZ, value: "xyz" }, ... ]

# Settings for axiom-db
db:
  replicas: 3
  image:
    repository: axiomhq/axiom-db
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 750m
      memory: 2Gi
    # limits:
    #   cpu: 2000m
    #   memory: 4Gi
  persistentVolume:
    size: 10Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  envFrom: []
  #   - configMapRef:
  #       name: <CONFIGMAP_NAME>
  #   - secretRef:
  #       name: <SECRET_NAME>
  extraEnvs: [] # [{ name: AXIOM_XYZ, value: "xyz" }, ... ]

# Settings for axiom-db-query-runner
queryRunner:
  replicas: 2
  image:
    repository: axiomhq/axiom-db
    pullPolicy: IfNotPresent
    tag: ""
  # Lambda query runner URL, you can set to the query fn ALB URL
  # Its usage overrides axiom-db-query-fn deployment
  lambdaUrl: ""

  resources:
    requests:
      cpu: 750m
      memory: 2Gi
    # limits:
    #   cpu: 2000m
    #   memory: 4Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    # podDisruptionBudget.enabled -- If **true**, create a
    # [PodDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/).
    enabled: false
    # podDisruptionBudget.minAvailable -- Specify the number of Pods that must still be available after an eviction.
    minAvailable: 1
    # podDisruptionBudget.maxUnavailable -- (int) Specify the number of Pods that can be unavailable after an eviction.
    maxUnavailable:
  autoscaling:
    # autoscaling.enabled -- If **true**, create a
    # [HorizontalPodAutoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/).
    enabled: false
    # autoscaling.minReplicas -- Specify the minimum number of replicas.
    minReplicas: 1
    # autoscaling.maxReplicas -- Specify the maximum number of replicas.
    maxReplicas: 10
    # autoscaling.targetCPUUtilizationPercentage -- Specify the target CPU utilization.
    targetCPUUtilizationPercentage: 80
    # autoscaling.targetMemoryUtilizationPercentage -- (int) Specify the target memory utilization.
    targetMemoryUtilizationPercentage:
    # autoscaling.behavior -- Configure separate scale-up and scale-down behaviors.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
  envFrom: []
  #   - configMapRef:
  #       name: <CONFIGMAP_NAME>
  #   - secretRef:
  #       name: <SECRET_NAME>
  extraEnvs: [] # [{ name: AXIOM_XYZ, value: "xyz" }, ... ]

# Settings for axiom-db-query-fn
queryFn:
  replicas: 4
  image:
    repository: axiomhq/axiom-query-func
    pullPolicy: IfNotPresent
    tag: ""
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    # limits:
    #   cpu: 2000m
    #   memory: 1Gi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    # podDisruptionBudget.enabled -- If **true**, create a
    # [PodDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/).
    enabled: false
    # podDisruptionBudget.minAvailable -- Specify the number of Pods that must still be available after an eviction.
    minAvailable: 1
    # podDisruptionBudget.maxUnavailable -- (int) Specify the number of Pods that can be unavailable after an eviction.
    maxUnavailable:
  autoscaling:
    # autoscaling.enabled -- If **true**, create a
    # [HorizontalPodAutoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/).
    enabled: false
    # autoscaling.minReplicas -- Specify the minimum number of replicas.
    minReplicas: 1
    # autoscaling.maxReplicas -- Specify the maximum number of replicas.
    maxReplicas: 10
    # autoscaling.targetCPUUtilizationPercentage -- Specify the target CPU utilization.
    targetCPUUtilizationPercentage: 80
    # autoscaling.targetMemoryUtilizationPercentage -- (int) Specify the target memory utilization.
    targetMemoryUtilizationPercentage:
    # autoscaling.behavior -- Configure separate scale-up and scale-down behaviors.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
  envFrom: []
  #   - configMapRef:
  #       name: <CONFIGMAP_NAME>
  #   - secretRef:
  #       name: <SECRET_NAME>
  extraEnvs: [] # [{ name: AXIOM_XYZ, value: "xyz" }, ... ]
